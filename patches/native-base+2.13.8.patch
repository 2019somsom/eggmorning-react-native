diff --git a/node_modules/native-base/.DS_Store b/node_modules/native-base/.DS_Store
new file mode 100644
index 0000000..80ed6e4
Binary files /dev/null and b/node_modules/native-base/.DS_Store differ
diff --git a/node_modules/native-base/dist/.DS_Store b/node_modules/native-base/dist/.DS_Store
new file mode 100644
index 0000000..be354aa
Binary files /dev/null and b/node_modules/native-base/dist/.DS_Store differ
diff --git a/node_modules/native-base/dist/src/.DS_Store b/node_modules/native-base/dist/src/.DS_Store
new file mode 100644
index 0000000..d0439af
Binary files /dev/null and b/node_modules/native-base/dist/src/.DS_Store differ
diff --git a/node_modules/native-base/dist/src/basic/.DS_Store b/node_modules/native-base/dist/src/basic/.DS_Store
new file mode 100644
index 0000000..ecf3f67
Binary files /dev/null and b/node_modules/native-base/dist/src/basic/.DS_Store differ
diff --git a/node_modules/native-base/dist/src/basic/Tabs/DefaultTabBar.js b/node_modules/native-base/dist/src/basic/Tabs/DefaultTabBar.js
index 3a4bf8a..2cfbcee 100644
--- a/node_modules/native-base/dist/src/basic/Tabs/DefaultTabBar.js
+++ b/node_modules/native-base/dist/src/basic/Tabs/DefaultTabBar.js
@@ -1,2 +1,199 @@
-Object.defineProperty(exports,"__esModule",{value:true});exports.DefaultTabBar=undefined;var _jsxFileName='src/basic/Tabs/DefaultTabBar.js';var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);var _createReactClass=require('create-react-class');var _createReactClass2=_interopRequireDefault(_createReactClass);var _lodash=require('lodash');var _lodash2=_interopRequireDefault(_lodash);var _nativeBaseShoutemTheme=require('native-base-shoutem-theme');var _mapPropsToStyleNames=require('../../utils/mapPropsToStyleNames');var _mapPropsToStyleNames2=_interopRequireDefault(_mapPropsToStyleNames);var _platform=require('./../../theme/variables/platform');var _platform2=_interopRequireDefault(_platform);var _TabHeading=require('../TabHeading');var _Text=require('../Text');var _TabContainer=require('../TabContainer');var _utils=require('../../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var ReactNative=require('react-native');var StyleSheet=ReactNative.StyleSheet,View=ReactNative.View,Animated=ReactNative.Animated,Platform=ReactNative.Platform;var Button=require('./Button');var DefaultTabBar=(0,_createReactClass2.default)({displayName:'DefaultTabBar',propTypes:{goToPage:_propTypes2.default.func,activeTab:_propTypes2.default.number,tabs:_propTypes2.default.array,backgroundColor:_propTypes2.default.string,activeTextColor:_propTypes2.default.string,inactiveTextColor:_propTypes2.default.string,disabledTextColor:_propTypes2.default.string,tabStyle:_utils.ViewPropTypes.style,renderTab:_propTypes2.default.func,underlineStyle:_utils.ViewPropTypes.style,tabContainerStyle:_utils.ViewPropTypes.style},contextTypes:{theme:_propTypes2.default.object},getDefaultProps:function getDefaultProps(){return{activeTextColor:_platform2.default.topTabBarActiveTextColor,inactiveTextColor:_platform2.default.topTabBarTextColor,disabledTextColor:_platform2.default.tabBarDisabledTextColor,backgroundColor:'transparent',tabFontSize:_platform2.default.tabFontSize};},renderTabOption:function renderTabOption(name,page){},renderTab:function renderTab(name,page,isTabActive,onPressHandler,tabStyle,activeTabStyle,textStyle,activeTextStyle,tabHeaderStyle,tabFontSize,disabled,disabledTextColor){var headerContent=typeof name!=='string'?name.props.children:undefined;var _props=this.props,activeTextColor=_props.activeTextColor,inactiveTextColor=_props.inactiveTextColor;var fontWeight=isTabActive?'bold':'normal';var isDisabled=disabled!==undefined;var textColor=void 0;if(isDisabled){textColor=disabledTextColor;}else if(isTabActive){textColor=activeTextStyle?activeTextStyle.color:activeTextColor;}else{textColor=textStyle?textStyle.color:inactiveTextColor;}if(typeof name==='string'){return _react2.default.createElement(Button,{style:{flex:1},disabled:isDisabled,key:name,onPress:function onPress(){return onPressHandler(page);},__source:{fileName:_jsxFileName,lineNumber:77}},_react2.default.createElement(_TabHeading.TabHeading,{style:isTabActive?activeTabStyle:tabStyle,active:isTabActive,__source:{fileName:_jsxFileName,lineNumber:83}},_react2.default.createElement(_Text.Text,{style:[{fontSize:tabFontSize},isTabActive?activeTextStyle:textStyle,{color:textColor}],__source:{fileName:_jsxFileName,lineNumber:87}},name)));}return _react2.default.createElement(Button,{style:{flex:1},disabled:isDisabled,key:_lodash2.default.random(1.2,5.2),onPress:function onPress(){return onPressHandler(page);},__source:{fileName:_jsxFileName,lineNumber:101}},_react2.default.createElement(_TabHeading.TabHeading,{style:tabHeaderStyle,active:isTabActive,__source:{fileName:_jsxFileName,lineNumber:107}},headerContent));},render:function render(){var _this=this;var variables=this.context.theme?this.context.theme['@@shoutem.theme/themeStyle'].variables:_platform2.default;var platformStyle=variables.platformStyle;var containerWidth=this.props.containerWidth;var numberOfTabs=this.props.tabs.length;var tabUnderlineStyle={position:'absolute',width:containerWidth/numberOfTabs,height:4,backgroundColor:variables.topTabBarActiveBorderColor,bottom:0};var left=this.props.scrollValue.interpolate({inputRange:[0,1],outputRange:[0,containerWidth/numberOfTabs]});return _react2.default.createElement(_TabContainer.TabContainer,{style:[{backgroundColor:variables.tabDefaultBg},this.props.tabContainerStyle?this.props.tabContainerStyle:{}],__source:{fileName:_jsxFileName,lineNumber:134}},this.props.tabs.map(function(name,page){var isTabActive=_this.props.activeTab===page;var renderTab=_this.props.renderTab||_this.renderTab;return renderTab(name,page,isTabActive,_this.props.goToPage,_this.props.tabStyle[page],_this.props.activeTabStyle[page],_this.props.textStyle[page],_this.props.activeTextStyle[page],_this.props.tabHeaderStyle[page],variables.tabFontSize,_this.props.disabled[page],_this.props.disabledTextColor);}),_react2.default.createElement(Animated.View,{style:[tabUnderlineStyle,{left:left},this.props.underlineStyle],__source:{fileName:_jsxFileName,lineNumber:158}}));}});var StyledTab=(0,_nativeBaseShoutemTheme.connectStyle)('NativeBase.DefaultTabBar',{},_mapPropsToStyleNames2.default)(DefaultTabBar);exports.DefaultTabBar=StyledTab;
-//# sourceMappingURL=DefaultTabBar.js.map
\ No newline at end of file
+// Object.defineProperty(exports,"__esModule",{value:true});exports.DefaultTabBar=undefined;var _jsxFileName='src/basic/Tabs/DefaultTabBar.js';var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);var _createReactClass=require('create-react-class');var _createReactClass2=_interopRequireDefault(_createReactClass);var _lodash=require('lodash');var _lodash2=_interopRequireDefault(_lodash);var _nativeBaseShoutemTheme=require('native-base-shoutem-theme');var _mapPropsToStyleNames=require('../../utils/mapPropsToStyleNames');var _mapPropsToStyleNames2=_interopRequireDefault(_mapPropsToStyleNames);var _platform=require('./../../theme/variables/platform');var _platform2=_interopRequireDefault(_platform);var _TabHeading=require('../TabHeading');var _Text=require('../Text');var _TabContainer=require('../TabContainer');var _utils=require('../../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var ReactNative=require('react-native');var StyleSheet=ReactNative.StyleSheet,View=ReactNative.View,Animated=ReactNative.Animated,Platform=ReactNative.Platform;var Button=require('./Button');var DefaultTabBar=(0,_createReactClass2.default)({displayName:'DefaultTabBar',propTypes:{goToPage:_propTypes2.default.func,activeTab:_propTypes2.default.number,tabs:_propTypes2.default.array,backgroundColor:_propTypes2.default.string,activeTextColor:_propTypes2.default.string,inactiveTextColor:_propTypes2.default.string,disabledTextColor:_propTypes2.default.string,tabStyle:_utils.ViewPropTypes.style,renderTab:_propTypes2.default.func,underlineStyle:_utils.ViewPropTypes.style,tabContainerStyle:_utils.ViewPropTypes.style},contextTypes:{theme:_propTypes2.default.object},getDefaultProps:function getDefaultProps(){return{activeTextColor:_platform2.default.topTabBarActiveTextColor,inactiveTextColor:_platform2.default.topTabBarTextColor,disabledTextColor:_platform2.default.tabBarDisabledTextColor,backgroundColor:'transparent',tabFontSize:_platform2.default.tabFontSize};},renderTabOption:function renderTabOption(name,page){},renderTab:function renderTab(name,page,isTabActive,onPressHandler,tabStyle,activeTabStyle,textStyle,activeTextStyle,tabHeaderStyle,tabFontSize,disabled,disabledTextColor){var headerContent=typeof name!=='string'?name.props.children:undefined;var _props=this.props,activeTextColor=_props.activeTextColor,inactiveTextColor=_props.inactiveTextColor;var fontWeight=isTabActive?'bold':'normal';var isDisabled=disabled!==undefined;var textColor=void 0;if(isDisabled){textColor=disabledTextColor;}else if(isTabActive){textColor=activeTextStyle?activeTextStyle.color:activeTextColor;}else{textColor=textStyle?textStyle.color:inactiveTextColor;}if(typeof name==='string'){return _react2.default.createElement(Button,{style:{flex:1},disabled:isDisabled,key:name,onPress:function onPress(){return onPressHandler(page);},__source:{fileName:_jsxFileName,lineNumber:77}},_react2.default.createElement(_TabHeading.TabHeading,{style:isTabActive?activeTabStyle:tabStyle,active:isTabActive,__source:{fileName:_jsxFileName,lineNumber:83}},_react2.default.createElement(_Text.Text,{style:[{fontSize:tabFontSize},isTabActive?activeTextStyle:textStyle,{color:textColor}],__source:{fileName:_jsxFileName,lineNumber:87}},name)));}return _react2.default.createElement(Button,{style:{flex:1},disabled:isDisabled,key:_lodash2.default.random(1.2,5.2),onPress:function onPress(){return onPressHandler(page);},__source:{fileName:_jsxFileName,lineNumber:101}},_react2.default.createElement(_TabHeading.TabHeading,{style:tabHeaderStyle,active:isTabActive,__source:{fileName:_jsxFileName,lineNumber:107}},headerContent));},render:function render(){var _this=this;var variables=this.context.theme?this.context.theme['@@shoutem.theme/themeStyle'].variables:_platform2.default;var platformStyle=variables.platformStyle;var containerWidth=this.props.containerWidth;var numberOfTabs=this.props.tabs.length;var tabUnderlineStyle={position:'absolute',width:containerWidth/numberOfTabs,height:4,backgroundColor:variables.topTabBarActiveBorderColor,bottom:0};var left=this.props.scrollValue.interpolate({inputRange:[0,1],outputRange:[0,containerWidth/numberOfTabs]});return _react2.default.createElement(_TabContainer.TabContainer,{style:[{backgroundColor:variables.tabDefaultBg},this.props.tabContainerStyle?this.props.tabContainerStyle:{}],__source:{fileName:_jsxFileName,lineNumber:134}},this.props.tabs.map(function(name,page){var isTabActive=_this.props.activeTab===page;var renderTab=_this.props.renderTab||_this.renderTab;return renderTab(name,page,isTabActive,_this.props.goToPage,_this.props.tabStyle[page],_this.props.activeTabStyle[page],_this.props.textStyle[page],_this.props.activeTextStyle[page],_this.props.tabHeaderStyle[page],variables.tabFontSize,_this.props.disabled[page],_this.props.disabledTextColor);}),_react2.default.createElement(Animated.View,{style:[tabUnderlineStyle,{left:left},this.props.underlineStyle],__source:{fileName:_jsxFileName,lineNumber:158}}));}});var StyledTab=(0,_nativeBaseShoutemTheme.connectStyle)('NativeBase.DefaultTabBar',{},_mapPropsToStyleNames2.default)(DefaultTabBar);exports.DefaultTabBar=StyledTab;
+// //# sourceMappingURL=DefaultTabBar.js.map
+
+// 21.02.23 추가, 슬기
+
+import React, { Component } from 'react';
+import PropTypes from 'prop-types';
+import createReactClass from 'create-react-class';
+import _ from 'lodash';
+import { connectStyle, StyleProvider } from 'native-base-shoutem-theme';
+import mapPropsToStyleNames from '../../utils/mapPropsToStyleNames';
+import variable from './../../theme/variables/platform';
+import { TabHeading } from '../TabHeading';
+import { Text } from '../Text';
+import { TabContainer } from '../TabContainer';
+const ReactNative = require('react-native');
+
+const { StyleSheet, View, Animated, Platform } = ReactNative;
+const Button = require('./Button');
+
+const DefaultTabBar = createReactClass({
+  propTypes: {
+    goToPage: PropTypes.func,
+    activeTab: PropTypes.number,
+    tabs: PropTypes.array,
+    backgroundColor: PropTypes.string,
+    activeTextColor: PropTypes.string,
+    inactiveTextColor: PropTypes.string,
+    disabledTextColor: PropTypes.string,
+    tabStyle: PropTypes.shape({
+      style: PropTypes.any,
+    }),
+    renderTab: PropTypes.func,
+    underlineStyle: PropTypes.shape({
+      style: PropTypes.any,
+    }),
+    tabContainerStyle: PropTypes.shape({
+      style: PropTypes.any,
+    }),
+    accessible: PropTypes.array,
+    accessibilityLabel: PropTypes.array
+  },
+  contextTypes: {
+    theme: PropTypes.object
+  },
+
+  getDefaultProps() {
+    return {
+      activeTextColor: variable.topTabBarActiveTextColor,
+      inactiveTextColor: variable.topTabBarTextColor,
+      disabledTextColor: variable.tabBarDisabledTextColor,
+      backgroundColor: 'transparent',
+      tabFontSize: variable.tabFontSize
+    };
+  },
+
+  renderTabOption(name, page) {},
+
+  renderTab(
+    name,
+    page,
+    isTabActive,
+    onPressHandler,
+    tabStyle,
+    activeTabStyle,
+    textStyle,
+    activeTextStyle,
+    tabHeaderStyle,
+    tabFontSize,
+    disabled,
+    disabledTextColor,
+    accessible,
+    accessibilityLabel
+  ) {
+    const headerContent =
+      typeof name !== 'string' ? name.props.children : undefined;
+    const { activeTextColor, inactiveTextColor } = this.props;
+    const fontWeight = isTabActive ? 'bold' : 'normal';
+    const isDisabled = !!disabled;
+    let textColor;
+    if (isDisabled) {
+      textColor = disabledTextColor;
+    } else if (isTabActive) {
+      textColor = activeTextStyle ? activeTextStyle.color : activeTextColor; // activeTextColor: default color for active Tab
+    } else {
+      textColor = textStyle ? textStyle.color : inactiveTextColor; // inactiveTextColor: default color for inactive Tab
+    }
+    const accessibilityState = {
+      disabled: isDisabled ? true : false,
+      selected: isTabActive ? true : false,
+    };
+    if (typeof name === 'string') {
+      return (
+        <Button
+          style={{ flex: 1 }}
+          disabled={isDisabled}
+          key={name}
+          accessible={accessible}
+          accessibilityRole='tab'
+          accessibilityLabel={accessibilityLabel}
+          accessibilityState={accessibilityState}
+          onPress={() => onPressHandler(page)}
+        >
+          <TabHeading
+            style={isTabActive ? activeTabStyle : tabStyle}
+            active={isTabActive}
+          >
+            <Text
+              style={[
+                { fontSize: tabFontSize },
+                isTabActive ? activeTextStyle : textStyle,
+                { color: textColor }
+              ]}
+            >
+              {name}
+            </Text>
+          </TabHeading>
+        </Button>
+      );
+    }
+    return (
+      <Button
+        style={{ flex: 1 }}
+        disabled={isDisabled}
+        key={_.random(1.2, 5.2)}
+        accessible={accessible}
+        accessibilityRole='tab'
+        accessibilityLabel={accessibilityLabel}
+        accessibilityState={accessibilityState}
+        onPress={() => onPressHandler(page)}
+      >
+        <TabHeading style={tabHeaderStyle} active={isTabActive}>
+          {headerContent}
+        </TabHeading>
+      </Button>
+    );
+  },
+
+  render() {
+    const variables = this.context.theme
+      ? this.context.theme['@@shoutem.theme/themeStyle'].variables
+      : variable;
+    const platformStyle = variables.platformStyle;
+    const containerWidth = this.props.containerWidth;
+    const numberOfTabs = this.props.tabs.length;
+    const tabUnderlineStyle = {
+      position: 'absolute',
+      width: containerWidth / numberOfTabs,
+      height: 4,
+      backgroundColor: variables.topTabBarActiveBorderColor,
+      bottom: 0
+    };
+
+    const left = this.props.scrollValue.interpolate({
+      inputRange: [0, 1],
+      outputRange: [0, containerWidth / numberOfTabs]
+    });
+    return (
+      <TabContainer
+        style={[
+          { backgroundColor: variables.tabDefaultBg },
+          this.props.tabContainerStyle ? this.props.tabContainerStyle : {}
+        ]}
+      >
+        {this.props.tabs.map((name, page) => {
+          const isTabActive = this.props.activeTab === page;
+          const renderTab = this.props.renderTab || this.renderTab;
+          return renderTab(
+            name,
+            page,
+            isTabActive,
+            this.props.goToPage,
+            this.props.tabStyle[page],
+            this.props.activeTabStyle[page],
+            this.props.textStyle[page],
+            this.props.activeTextStyle[page],
+            this.props.tabHeaderStyle[page],
+            variables.tabFontSize,
+            this.props.disabled[page],
+            this.props.disabledTextColor,
+            this.props.accessible[page],
+            this.props.accessibilityLabel[page]
+          );
+        })}
+        <Animated.View
+          style={[tabUnderlineStyle, { left }, this.props.underlineStyle]}
+        />
+      </TabContainer>
+    );
+  }
+});
+
+// module.exports = DefaultTabBar;
+const StyledTab = connectStyle(
+  'NativeBase.DefaultTabBar',
+  {},
+  mapPropsToStyleNames
+)(DefaultTabBar);
+export { StyledTab as DefaultTabBar };
\ No newline at end of file
diff --git a/node_modules/native-base/dist/src/basic/Tabs/ScrollableTabBar.js b/node_modules/native-base/dist/src/basic/Tabs/ScrollableTabBar.js
index 55ec193..ca9085f 100644
--- a/node_modules/native-base/dist/src/basic/Tabs/ScrollableTabBar.js
+++ b/node_modules/native-base/dist/src/basic/Tabs/ScrollableTabBar.js
@@ -1,2 +1,358 @@
-Object.defineProperty(exports,"__esModule",{value:true});exports.ScrollableTab=undefined;var _jsxFileName='src/basic/Tabs/ScrollableTabBar.js';var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);var _createReactClass=require('create-react-class');var _createReactClass2=_interopRequireDefault(_createReactClass);var _lodash=require('lodash');var _nativeBaseShoutemTheme=require('native-base-shoutem-theme');var _mapPropsToStyleNames=require('../../utils/mapPropsToStyleNames');var _mapPropsToStyleNames2=_interopRequireDefault(_mapPropsToStyleNames);var _platform=require('./../../theme/variables/platform');var _platform2=_interopRequireDefault(_platform);var _TabHeading=require('../TabHeading');var _Text=require('../Text');var _TabContainer=require('../TabContainer');var _utils=require('../../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Button=require('./Button');var ReactNative=require('react-native');var View=ReactNative.View,Animated=ReactNative.Animated,StyleSheet=ReactNative.StyleSheet,ScrollView=ReactNative.ScrollView,Platform=ReactNative.Platform,Dimensions=ReactNative.Dimensions;var WINDOW_WIDTH=Dimensions.get('window').width;var ScrollableTabBar=(0,_createReactClass2.default)({displayName:'ScrollableTabBar',propTypes:{goToPage:_propTypes2.default.func,activeTab:_propTypes2.default.number,tabs:_propTypes2.default.array,backgroundColor:_propTypes2.default.string,activeTextColor:_propTypes2.default.string,inactiveTextColor:_propTypes2.default.string,scrollOffset:_propTypes2.default.number,style:_utils.ViewPropTypes.style,tabStyle:_utils.ViewPropTypes.style,tabsContainerStyle:_utils.ViewPropTypes.style,renderTab:_propTypes2.default.func,underlineStyle:_utils.ViewPropTypes.style,onScroll:_propTypes2.default.func},contextTypes:{theme:_propTypes2.default.object},getDefaultProps:function getDefaultProps(){return{scrollOffset:52,activeTextColor:'navy',inactiveTextColor:'black',backgroundColor:_platform2.default.tabDefaultBg,style:{},tabStyle:{},tabsContainerStyle:{},underlineStyle:{},tabFontSize:_platform2.default.tabFontSize};},getInitialState:function getInitialState(){this._tabsMeasurements=[];return{_leftTabUnderline:new Animated.Value(0),_widthTabUnderline:new Animated.Value(0),_containerWidth:null};},componentDidMount:function componentDidMount(){this.props.scrollValue.addListener(this.updateView);},updateView:function updateView(offset){var position=Math.floor(offset.value);var pageOffset=offset.value%1;var tabCount=this.props.tabs.length;var lastTabPosition=tabCount-1;if(tabCount===0||offset.value<0||offset.value>lastTabPosition){return;}if(this.necessarilyMeasurementsCompleted(position,position===lastTabPosition)){this.updateTabPanel(position,pageOffset);this.updateTabUnderline(position,pageOffset,tabCount);}},necessarilyMeasurementsCompleted:function necessarilyMeasurementsCompleted(position,isLastTab){return this._tabsMeasurements[position]&&(isLastTab||this._tabsMeasurements[position+1])&&this._tabContainerMeasurements&&this._containerMeasurements;},updateTabPanel:function updateTabPanel(position,pageOffset){var containerWidth=this._containerMeasurements.width;var tabWidth=this._tabsMeasurements[position].width;var nextTabMeasurements=this._tabsMeasurements[position+1];var nextTabWidth=nextTabMeasurements&&nextTabMeasurements.width||0;var tabOffset=this._tabsMeasurements[position].left;var absolutePageOffset=pageOffset*tabWidth;var newScrollX=tabOffset+absolutePageOffset;newScrollX-=(containerWidth-(1-pageOffset)*tabWidth-pageOffset*nextTabWidth)/2;newScrollX=newScrollX>=0?newScrollX:0;if(Platform.OS==='android'){this._scrollView.scrollTo({x:newScrollX,y:0,animated:false});}else{var rightBoundScroll=this._tabContainerMeasurements.width-this._containerMeasurements.width;newScrollX=newScrollX>rightBoundScroll?rightBoundScroll:newScrollX;this._scrollView.scrollTo({x:newScrollX,y:0,animated:false});}},updateTabUnderline:function updateTabUnderline(position,pageOffset,tabCount){var lineLeft=this._tabsMeasurements[position].left;var lineRight=this._tabsMeasurements[position].right;if(position<tabCount-1){var nextTabLeft=this._tabsMeasurements[position+1].left;var nextTabRight=this._tabsMeasurements[position+1].right;var newLineLeft=pageOffset*nextTabLeft+(1-pageOffset)*lineLeft;var newLineRight=pageOffset*nextTabRight+(1-pageOffset)*lineRight;this.state._leftTabUnderline.setValue(newLineLeft);this.state._widthTabUnderline.setValue(newLineRight-newLineLeft);}else{this.state._leftTabUnderline.setValue(lineLeft);this.state._widthTabUnderline.setValue(lineRight-lineLeft);}},renderTab:function renderTab(name,page,isTabActive,onPressHandler,onLayoutHandler,tabStyle,activeTabStyle,textStyle,activeTextStyle,tabHeaderStyle,tabFontSize){var headerContent=typeof name!=='string'?name.props.children:undefined;var _props=this.props,activeTextColor=_props.activeTextColor,inactiveTextColor=_props.inactiveTextColor;var textColor=isTabActive?activeTextColor:inactiveTextColor;var fontWeight=isTabActive?'bold':'normal';if(typeof name==='string'){return _react2.default.createElement(Button,{key:name+'_'+page,onPress:function onPress(){return onPressHandler(page);},onLayout:onLayoutHandler,__source:{fileName:_jsxFileName,lineNumber:174}},_react2.default.createElement(_TabHeading.TabHeading,{scrollable:true,style:isTabActive?activeTabStyle:tabStyle,active:isTabActive,__source:{fileName:_jsxFileName,lineNumber:179}},_react2.default.createElement(_Text.Text,{style:[isTabActive?activeTextStyle:textStyle,{fontSize:tabFontSize}],__source:{fileName:_jsxFileName,lineNumber:184}},name)));}return _react2.default.createElement(Button,{key:name+'_'+page,onPress:function onPress(){return onPressHandler(page);},onLayout:onLayoutHandler,__source:{fileName:_jsxFileName,lineNumber:197}},_react2.default.createElement(_TabHeading.TabHeading,{scrollable:true,style:tabHeaderStyle,active:isTabActive,__source:{fileName:_jsxFileName,lineNumber:202}},headerContent));},measureTab:function measureTab(page,event){var _event$nativeEvent$la=event.nativeEvent.layout,x=_event$nativeEvent$la.x,width=_event$nativeEvent$la.width,height=_event$nativeEvent$la.height;this._tabsMeasurements[page]={left:x,right:x+width,width:width,height:height};this.updateView({value:this.props.scrollValue._value});},render:function render(){var _this=this;var variables=this.context.theme?this.context.theme['@@shoutem.theme/themeStyle'].variables:_platform2.default;var tabUnderlineStyle={position:'absolute',height:4,backgroundColor:variables.topTabBarActiveBorderColor,bottom:0};var dynamicTabUnderline={left:this.state._leftTabUnderline,width:this.state._widthTabUnderline};return _react2.default.createElement(View,{style:[styles.container,{backgroundColor:this.props.backgroundColor},this.props.style],onLayout:this.onContainerLayout,__source:{fileName:_jsxFileName,lineNumber:233}},_react2.default.createElement(ScrollView,{automaticallyAdjustContentInsets:false,ref:function ref(scrollView){_this._scrollView=scrollView;},horizontal:true,showsHorizontalScrollIndicator:false,showsVerticalScrollIndicator:false,directionalLockEnabled:true,onScroll:this.props.onScroll,bounces:false,scrollsToTop:false,__source:{fileName:_jsxFileName,lineNumber:241}},_react2.default.createElement(View,{style:[styles.tabs,{width:this.state._containerWidth},this.props.tabsContainerStyle],ref:'tabContainer',onLayout:this.onTabContainerLayout,__source:{fileName:_jsxFileName,lineNumber:254}},this.props.tabs.map(function(name,page){var isTabActive=_this.props.activeTab===page;var renderTab=_this.props.renderTab||_this.renderTab;return renderTab(name,page,isTabActive,_this.props.goToPage,_this.measureTab.bind(_this,page),_this.props.tabStyle[page],_this.props.activeTabStyle[page],_this.props.textStyle[page],_this.props.activeTextStyle[page],_this.props.tabHeaderStyle[page],variables.tabFontSize);}),_react2.default.createElement(Animated.View,{style:[tabUnderlineStyle,dynamicTabUnderline,this.props.underlineStyle],__source:{fileName:_jsxFileName,lineNumber:280}}))));},UNSAFE_componentWillReceiveProps:function UNSAFE_componentWillReceiveProps(nextProps){if(!(0,_lodash.isEqual)(this.props.tabs,nextProps.tabs)&&this.state._containerWidth){this.setState({_containerWidth:null});}},onTabContainerLayout:function onTabContainerLayout(e){this._tabContainerMeasurements=e.nativeEvent.layout;var width=this._tabContainerMeasurements.width;if(width<WINDOW_WIDTH){width=WINDOW_WIDTH;}this.setState({_containerWidth:width});this.updateView({value:this.props.scrollValue._value});},onContainerLayout:function onContainerLayout(e){this._containerMeasurements=e.nativeEvent.layout;this.updateView({value:this.props.scrollValue._value});}});var StyledTab=(0,_nativeBaseShoutemTheme.connectStyle)('NativeBase.ScrollableTab',{},_mapPropsToStyleNames2.default)(ScrollableTabBar);exports.ScrollableTab=StyledTab;var styles=StyleSheet.create({tab:{height:49,alignItems:'center',justifyContent:'center',paddingLeft:20,paddingRight:20},container:{height:50,borderWidth:1,borderTopWidth:0,borderLeftWidth:0,borderRightWidth:0,borderColor:'#ccc'},tabs:{flexDirection:'row',justifyContent:'space-around'}});
-//# sourceMappingURL=ScrollableTabBar.js.map
\ No newline at end of file
+// Object.defineProperty(exports,"__esModule",{value:true});exports.ScrollableTab=undefined;var _jsxFileName='src/basic/Tabs/ScrollableTabBar.js';var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);var _createReactClass=require('create-react-class');var _createReactClass2=_interopRequireDefault(_createReactClass);var _lodash=require('lodash');var _nativeBaseShoutemTheme=require('native-base-shoutem-theme');var _mapPropsToStyleNames=require('../../utils/mapPropsToStyleNames');var _mapPropsToStyleNames2=_interopRequireDefault(_mapPropsToStyleNames);var _platform=require('./../../theme/variables/platform');var _platform2=_interopRequireDefault(_platform);var _TabHeading=require('../TabHeading');var _Text=require('../Text');var _TabContainer=require('../TabContainer');var _utils=require('../../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Button=require('./Button');var ReactNative=require('react-native');var View=ReactNative.View,Animated=ReactNative.Animated,StyleSheet=ReactNative.StyleSheet,ScrollView=ReactNative.ScrollView,Platform=ReactNative.Platform,Dimensions=ReactNative.Dimensions;var WINDOW_WIDTH=Dimensions.get('window').width;var ScrollableTabBar=(0,_createReactClass2.default)({displayName:'ScrollableTabBar',propTypes:{goToPage:_propTypes2.default.func,activeTab:_propTypes2.default.number,tabs:_propTypes2.default.array,backgroundColor:_propTypes2.default.string,activeTextColor:_propTypes2.default.string,inactiveTextColor:_propTypes2.default.string,scrollOffset:_propTypes2.default.number,style:_utils.ViewPropTypes.style,tabStyle:_utils.ViewPropTypes.style,tabsContainerStyle:_utils.ViewPropTypes.style,renderTab:_propTypes2.default.func,underlineStyle:_utils.ViewPropTypes.style,onScroll:_propTypes2.default.func},contextTypes:{theme:_propTypes2.default.object},getDefaultProps:function getDefaultProps(){return{scrollOffset:52,activeTextColor:'navy',inactiveTextColor:'black',backgroundColor:_platform2.default.tabDefaultBg,style:{},tabStyle:{},tabsContainerStyle:{},underlineStyle:{},tabFontSize:_platform2.default.tabFontSize};},getInitialState:function getInitialState(){this._tabsMeasurements=[];return{_leftTabUnderline:new Animated.Value(0),_widthTabUnderline:new Animated.Value(0),_containerWidth:null};},componentDidMount:function componentDidMount(){this.props.scrollValue.addListener(this.updateView);},updateView:function updateView(offset){var position=Math.floor(offset.value);var pageOffset=offset.value%1;var tabCount=this.props.tabs.length;var lastTabPosition=tabCount-1;if(tabCount===0||offset.value<0||offset.value>lastTabPosition){return;}if(this.necessarilyMeasurementsCompleted(position,position===lastTabPosition)){this.updateTabPanel(position,pageOffset);this.updateTabUnderline(position,pageOffset,tabCount);}},necessarilyMeasurementsCompleted:function necessarilyMeasurementsCompleted(position,isLastTab){return this._tabsMeasurements[position]&&(isLastTab||this._tabsMeasurements[position+1])&&this._tabContainerMeasurements&&this._containerMeasurements;},updateTabPanel:function updateTabPanel(position,pageOffset){var containerWidth=this._containerMeasurements.width;var tabWidth=this._tabsMeasurements[position].width;var nextTabMeasurements=this._tabsMeasurements[position+1];var nextTabWidth=nextTabMeasurements&&nextTabMeasurements.width||0;var tabOffset=this._tabsMeasurements[position].left;var absolutePageOffset=pageOffset*tabWidth;var newScrollX=tabOffset+absolutePageOffset;newScrollX-=(containerWidth-(1-pageOffset)*tabWidth-pageOffset*nextTabWidth)/2;newScrollX=newScrollX>=0?newScrollX:0;if(Platform.OS==='android'){this._scrollView.scrollTo({x:newScrollX,y:0,animated:false});}else{var rightBoundScroll=this._tabContainerMeasurements.width-this._containerMeasurements.width;newScrollX=newScrollX>rightBoundScroll?rightBoundScroll:newScrollX;this._scrollView.scrollTo({x:newScrollX,y:0,animated:false});}},updateTabUnderline:function updateTabUnderline(position,pageOffset,tabCount){var lineLeft=this._tabsMeasurements[position].left;var lineRight=this._tabsMeasurements[position].right;if(position<tabCount-1){var nextTabLeft=this._tabsMeasurements[position+1].left;var nextTabRight=this._tabsMeasurements[position+1].right;var newLineLeft=pageOffset*nextTabLeft+(1-pageOffset)*lineLeft;var newLineRight=pageOffset*nextTabRight+(1-pageOffset)*lineRight;this.state._leftTabUnderline.setValue(newLineLeft);this.state._widthTabUnderline.setValue(newLineRight-newLineLeft);}else{this.state._leftTabUnderline.setValue(lineLeft);this.state._widthTabUnderline.setValue(lineRight-lineLeft);}},renderTab:function renderTab(name,page,isTabActive,onPressHandler,onLayoutHandler,tabStyle,activeTabStyle,textStyle,activeTextStyle,tabHeaderStyle,tabFontSize){var headerContent=typeof name!=='string'?name.props.children:undefined;var _props=this.props,activeTextColor=_props.activeTextColor,inactiveTextColor=_props.inactiveTextColor;var textColor=isTabActive?activeTextColor:inactiveTextColor;var fontWeight=isTabActive?'bold':'normal';if(typeof name==='string'){return _react2.default.createElement(Button,{key:name+'_'+page,onPress:function onPress(){return onPressHandler(page);},onLayout:onLayoutHandler,__source:{fileName:_jsxFileName,lineNumber:174}},_react2.default.createElement(_TabHeading.TabHeading,{scrollable:true,style:isTabActive?activeTabStyle:tabStyle,active:isTabActive,__source:{fileName:_jsxFileName,lineNumber:179}},_react2.default.createElement(_Text.Text,{style:[isTabActive?activeTextStyle:textStyle,{fontSize:tabFontSize}],__source:{fileName:_jsxFileName,lineNumber:184}},name)));}return _react2.default.createElement(Button,{key:name+'_'+page,onPress:function onPress(){return onPressHandler(page);},onLayout:onLayoutHandler,__source:{fileName:_jsxFileName,lineNumber:197}},_react2.default.createElement(_TabHeading.TabHeading,{scrollable:true,style:tabHeaderStyle,active:isTabActive,__source:{fileName:_jsxFileName,lineNumber:202}},headerContent));},measureTab:function measureTab(page,event){var _event$nativeEvent$la=event.nativeEvent.layout,x=_event$nativeEvent$la.x,width=_event$nativeEvent$la.width,height=_event$nativeEvent$la.height;this._tabsMeasurements[page]={left:x,right:x+width,width:width,height:height};this.updateView({value:this.props.scrollValue._value});},render:function render(){var _this=this;var variables=this.context.theme?this.context.theme['@@shoutem.theme/themeStyle'].variables:_platform2.default;var tabUnderlineStyle={position:'absolute',height:4,backgroundColor:variables.topTabBarActiveBorderColor,bottom:0};var dynamicTabUnderline={left:this.state._leftTabUnderline,width:this.state._widthTabUnderline};return _react2.default.createElement(View,{style:[styles.container,{backgroundColor:this.props.backgroundColor},this.props.style],onLayout:this.onContainerLayout,__source:{fileName:_jsxFileName,lineNumber:233}},_react2.default.createElement(ScrollView,{automaticallyAdjustContentInsets:false,ref:function ref(scrollView){_this._scrollView=scrollView;},horizontal:true,showsHorizontalScrollIndicator:false,showsVerticalScrollIndicator:false,directionalLockEnabled:true,onScroll:this.props.onScroll,bounces:false,scrollsToTop:false,__source:{fileName:_jsxFileName,lineNumber:241}},_react2.default.createElement(View,{style:[styles.tabs,{width:this.state._containerWidth},this.props.tabsContainerStyle],ref:'tabContainer',onLayout:this.onTabContainerLayout,__source:{fileName:_jsxFileName,lineNumber:254}},this.props.tabs.map(function(name,page){var isTabActive=_this.props.activeTab===page;var renderTab=_this.props.renderTab||_this.renderTab;return renderTab(name,page,isTabActive,_this.props.goToPage,_this.measureTab.bind(_this,page),_this.props.tabStyle[page],_this.props.activeTabStyle[page],_this.props.textStyle[page],_this.props.activeTextStyle[page],_this.props.tabHeaderStyle[page],variables.tabFontSize);}),_react2.default.createElement(Animated.View,{style:[tabUnderlineStyle,dynamicTabUnderline,this.props.underlineStyle],__source:{fileName:_jsxFileName,lineNumber:280}}))));},UNSAFE_componentWillReceiveProps:function UNSAFE_componentWillReceiveProps(nextProps){if(!(0,_lodash.isEqual)(this.props.tabs,nextProps.tabs)&&this.state._containerWidth){this.setState({_containerWidth:null});}},onTabContainerLayout:function onTabContainerLayout(e){this._tabContainerMeasurements=e.nativeEvent.layout;var width=this._tabContainerMeasurements.width;if(width<WINDOW_WIDTH){width=WINDOW_WIDTH;}this.setState({_containerWidth:width});this.updateView({value:this.props.scrollValue._value});},onContainerLayout:function onContainerLayout(e){this._containerMeasurements=e.nativeEvent.layout;this.updateView({value:this.props.scrollValue._value});}});var StyledTab=(0,_nativeBaseShoutemTheme.connectStyle)('NativeBase.ScrollableTab',{},_mapPropsToStyleNames2.default)(ScrollableTabBar);exports.ScrollableTab=StyledTab;var styles=StyleSheet.create({tab:{height:49,alignItems:'center',justifyContent:'center',paddingLeft:20,paddingRight:20},container:{height:50,borderWidth:1,borderTopWidth:0,borderLeftWidth:0,borderRightWidth:0,borderColor:'#ccc'},tabs:{flexDirection:'row',justifyContent:'space-around'}});
+// //# sourceMappingURL=ScrollableTabBar.js.map
+
+// 21.02.23 추가, 슬기
+
+import React, { Component } from 'react';
+import PropTypes from 'prop-types';
+import createReactClass from 'create-react-class';
+import { isEqual } from 'lodash';
+import { connectStyle, StyleProvider } from 'native-base-shoutem-theme';
+import mapPropsToStyleNames from '../../utils/mapPropsToStyleNames';
+import variable from './../../theme/variables/platform';
+import { TabHeading } from '../TabHeading';
+import { Text } from '../Text';
+import { TabContainer } from '../TabContainer';
+const Button = require('./Button');
+const ReactNative = require('react-native');
+const {
+  View,
+  Animated,
+  StyleSheet,
+  ScrollView,
+  Platform,
+  Dimensions
+} = ReactNative;
+
+const WINDOW_WIDTH = Dimensions.get('window').width;
+
+const ScrollableTabBar = createReactClass({
+  propTypes: {
+    goToPage: PropTypes.func,
+    activeTab: PropTypes.number,
+    tabs: PropTypes.array,
+    backgroundColor: PropTypes.string,
+    activeTextColor: PropTypes.string,
+    inactiveTextColor: PropTypes.string,
+    scrollOffset: PropTypes.number,
+    style: PropTypes.shape({
+      style: PropTypes.any,
+    }),
+    tabStyle: PropTypes.shape({
+      style: PropTypes.any,
+    }),
+    tabsContainerStyle: PropTypes.shape({
+      style: PropTypes.any,
+    }),
+    renderTab: PropTypes.func,
+    underlineStyle: PropTypes.shape({
+      style: PropTypes.any,
+    }),
+    onScroll: PropTypes.func
+  },
+  contextTypes: {
+    theme: PropTypes.object
+  },
+
+  getDefaultProps() {
+    return {
+      scrollOffset: 52,
+      activeTextColor: 'navy',
+      inactiveTextColor: 'black',
+      backgroundColor: variable.tabDefaultBg,
+      style: {},
+      tabStyle: {},
+      tabsContainerStyle: {},
+      underlineStyle: {},
+      tabFontSize: variable.tabFontSize
+    };
+  },
+
+  getInitialState() {
+    this._tabsMeasurements = [];
+    return {
+      _leftTabUnderline: new Animated.Value(0),
+      _widthTabUnderline: new Animated.Value(0),
+      _containerWidth: null
+    };
+  },
+
+  componentDidMount() {
+    this.props.scrollValue.addListener(this.updateView);
+  },
+
+  updateView(offset) {
+    const position = Math.floor(offset.value);
+    const pageOffset = offset.value % 1;
+    const tabCount = this.props.tabs.length;
+    const lastTabPosition = tabCount - 1;
+
+    if (tabCount === 0 || offset.value < 0 || offset.value > lastTabPosition) {
+      return;
+    }
+
+    if (
+      this.necessarilyMeasurementsCompleted(
+        position,
+        position === lastTabPosition
+      )
+    ) {
+      this.updateTabPanel(position, pageOffset);
+      this.updateTabUnderline(position, pageOffset, tabCount);
+    }
+  },
+
+  necessarilyMeasurementsCompleted(position, isLastTab) {
+    return (
+      this._tabsMeasurements[position] &&
+      (isLastTab || this._tabsMeasurements[position + 1]) &&
+      this._tabContainerMeasurements &&
+      this._containerMeasurements
+    );
+  },
+
+  updateTabPanel(position, pageOffset) {
+    const containerWidth = this._containerMeasurements.width;
+    const tabWidth = this._tabsMeasurements[position].width;
+    const nextTabMeasurements = this._tabsMeasurements[position + 1];
+    const nextTabWidth =
+      (nextTabMeasurements && nextTabMeasurements.width) || 0;
+    const tabOffset = this._tabsMeasurements[position].left;
+    const absolutePageOffset = pageOffset * tabWidth;
+    let newScrollX = tabOffset + absolutePageOffset;
+
+    // center tab and smooth tab change (for when tabWidth changes a lot between two tabs)
+    newScrollX -=
+      (containerWidth -
+        (1 - pageOffset) * tabWidth -
+        pageOffset * nextTabWidth) /
+      2;
+    newScrollX = newScrollX >= 0 ? newScrollX : 0;
+
+    if (Platform.OS === 'android') {
+      this._scrollView.scrollTo({ x: newScrollX, y: 0, animated: false });
+    } else {
+      const rightBoundScroll =
+        this._tabContainerMeasurements.width -
+        this._containerMeasurements.width;
+      newScrollX =
+        newScrollX > rightBoundScroll ? rightBoundScroll : newScrollX;
+      this._scrollView.scrollTo({ x: newScrollX, y: 0, animated: false });
+    }
+  },
+
+  updateTabUnderline(position, pageOffset, tabCount) {
+    const lineLeft = this._tabsMeasurements[position].left;
+    const lineRight = this._tabsMeasurements[position].right;
+
+    if (position < tabCount - 1) {
+      const nextTabLeft = this._tabsMeasurements[position + 1].left;
+      const nextTabRight = this._tabsMeasurements[position + 1].right;
+
+      const newLineLeft =
+        pageOffset * nextTabLeft + (1 - pageOffset) * lineLeft;
+      const newLineRight =
+        pageOffset * nextTabRight + (1 - pageOffset) * lineRight;
+
+      this.state._leftTabUnderline.setValue(newLineLeft);
+      this.state._widthTabUnderline.setValue(newLineRight - newLineLeft);
+    } else {
+      this.state._leftTabUnderline.setValue(lineLeft);
+      this.state._widthTabUnderline.setValue(lineRight - lineLeft);
+    }
+  },
+
+  renderTab(
+    name,
+    page,
+    isTabActive,
+    onPressHandler,
+    onLayoutHandler,
+    tabStyle,
+    activeTabStyle,
+    textStyle,
+    activeTextStyle,
+    tabHeaderStyle,
+    tabFontSize
+  ) {
+    const headerContent =
+      typeof name !== 'string' ? name.props.children : undefined;
+    const { activeTextColor, inactiveTextColor } = this.props;
+    const textColor = isTabActive ? activeTextColor : inactiveTextColor;
+    const fontWeight = isTabActive ? 'bold' : 'normal';
+
+    if (typeof name === 'string') {
+      return (
+        <Button
+          key={`${name}_${page}`}
+          onPress={() => onPressHandler(page)}
+          onLayout={onLayoutHandler}
+        >
+          <TabHeading
+            scrollable
+            style={isTabActive ? activeTabStyle : tabStyle}
+            active={isTabActive}
+          >
+            <Text
+              style={[
+                isTabActive ? activeTextStyle : textStyle,
+                { fontSize: tabFontSize }
+              ]}
+            >
+              {name}
+            </Text>
+          </TabHeading>
+        </Button>
+      );
+    }
+    return (
+      <Button
+        key={`${name}_${page}`}
+        onPress={() => onPressHandler(page)}
+        onLayout={onLayoutHandler}
+      >
+        <TabHeading scrollable style={tabHeaderStyle} active={isTabActive}>
+          {headerContent}
+        </TabHeading>
+      </Button>
+    );
+
+  },
+
+  measureTab(page, event) {
+    const { x, width, height } = event.nativeEvent.layout;
+    this._tabsMeasurements[page] = { left: x, right: x + width, width, height };
+    this.updateView({ value: this.props.scrollValue._value });
+  },
+
+  render() {
+    const variables = this.context.theme
+      ? this.context.theme['@@shoutem.theme/themeStyle'].variables
+      : variable;
+    const tabUnderlineStyle = {
+      position: 'absolute',
+      height: 4,
+      backgroundColor: variables.topTabBarActiveBorderColor,
+      bottom: 0
+    };
+
+    const dynamicTabUnderline = {
+      left: this.state._leftTabUnderline,
+      width: this.state._widthTabUnderline
+    };
+
+    return (
+      <View
+        style={[
+          styles.container,
+          { backgroundColor: this.props.backgroundColor },
+          this.props.style
+        ]}
+        onLayout={this.onContainerLayout}
+      >
+        <ScrollView
+          automaticallyAdjustContentInsets={false}
+          ref={scrollView => {
+            this._scrollView = scrollView;
+          }}
+          horizontal
+          showsHorizontalScrollIndicator={false}
+          showsVerticalScrollIndicator={false}
+          directionalLockEnabled
+          onScroll={this.props.onScroll}
+          bounces={false}
+          scrollsToTop={false}
+        >
+          <View
+            style={[
+              styles.tabs,
+              { width: this.state._containerWidth },
+              this.props.tabsContainerStyle
+            ]}
+            ref={'tabContainer'}
+            onLayout={this.onTabContainerLayout}
+          >
+            {this.props.tabs.map((name, page) => {
+              const isTabActive = this.props.activeTab === page;
+              const renderTab = this.props.renderTab || this.renderTab;
+              return renderTab(
+                name,
+                page,
+                isTabActive,
+                this.props.goToPage,
+                this.measureTab.bind(this, page),
+                this.props.tabStyle[page],
+                this.props.activeTabStyle[page],
+                this.props.textStyle[page],
+                this.props.activeTextStyle[page],
+                this.props.tabHeaderStyle[page],
+                this.props.tabFontSize[page]
+              );
+            })}
+            <Animated.View
+              style={[
+                tabUnderlineStyle,
+                dynamicTabUnderline,
+                this.props.underlineStyle
+              ]}
+            />
+          </View>
+        </ScrollView>
+      </View>
+    );
+  },
+
+  UNSAFE_componentWillReceiveProps(nextProps) {
+    // If the tabs change, force the width of the tabs container to be recalculated
+    if (
+      !isEqual(this.props.tabs, nextProps.tabs) &&
+      this.state._containerWidth
+    ) {
+      this.setState({ _containerWidth: null });
+    }
+  },
+
+  onTabContainerLayout(e) {
+    this._tabContainerMeasurements = e.nativeEvent.layout;
+    let width = this._tabContainerMeasurements.width;
+    if (width < WINDOW_WIDTH) {
+      width = WINDOW_WIDTH;
+    }
+    this.setState({ _containerWidth: width });
+    this.updateView({ value: this.props.scrollValue._value });
+  },
+
+  onContainerLayout(e) {
+    this._containerMeasurements = e.nativeEvent.layout;
+    this.updateView({ value: this.props.scrollValue._value });
+  }
+});
+
+// module.exports = ScrollableTabBar;
+const StyledTab = connectStyle(
+  'NativeBase.ScrollableTab',
+  {},
+  mapPropsToStyleNames
+)(ScrollableTabBar);
+export { StyledTab as ScrollableTab };
+const styles = StyleSheet.create({
+  tab: {
+    height: 49,
+    alignItems: 'center',
+    justifyContent: 'center',
+    paddingLeft: 20,
+    paddingRight: 20
+  },
+  container: {
+    height: 50,
+    borderWidth: 1,
+    borderTopWidth: 0,
+    borderLeftWidth: 0,
+    borderRightWidth: 0,
+    borderColor: '#ccc'
+  },
+  tabs: {
+    flexDirection: 'row',
+    justifyContent: 'space-around'
+  }
+});
\ No newline at end of file
diff --git a/node_modules/native-base/dist/src/basic/Tabs/index.js b/node_modules/native-base/dist/src/basic/Tabs/index.js
index cf5f0f3..24df839 100644
--- a/node_modules/native-base/dist/src/basic/Tabs/index.js
+++ b/node_modules/native-base/dist/src/basic/Tabs/index.js
@@ -1,2 +1,374 @@
-Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName='src/basic/Tabs/index.js';var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);var _createReactClass=require('create-react-class');var _createReactClass2=_interopRequireDefault(_createReactClass);var _lodash=require('lodash');var _lodash2=_interopRequireDefault(_lodash);var _utils=require('../../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var React=require('react');var Component=React.Component;var ReactNative=require('react-native');var Dimensions=ReactNative.Dimensions,View=ReactNative.View,Animated=ReactNative.Animated,ScrollView=ReactNative.ScrollView,StyleSheet=ReactNative.StyleSheet,Platform=ReactNative.Platform;var TimerMixin=require('react-timer-mixin');var SceneComponent=require('./SceneComponent');var _require=require('./DefaultTabBar'),DefaultTabBar=_require.DefaultTabBar;var _require2=require('./ScrollableTabBar'),ScrollableTabBar=_require2.ScrollableTabBar;var ScrollableTabView=(0,_createReactClass2.default)({displayName:'ScrollableTabView',mixins:[TimerMixin],statics:{DefaultTabBar:DefaultTabBar,ScrollableTabBar:ScrollableTabBar},propTypes:{tabBarPosition:_propTypes2.default.oneOf(['top','bottom','overlayTop','overlayBottom']),initialPage:_propTypes2.default.number,page:_propTypes2.default.number,onChangeTab:_propTypes2.default.func,onScroll:_propTypes2.default.func,renderTabBar:_propTypes2.default.any,style:_utils.ViewPropTypes.style,contentProps:_propTypes2.default.object,scrollWithoutAnimation:_propTypes2.default.bool,locked:_propTypes2.default.bool,prerenderingSiblingsNumber:_propTypes2.default.number},getDefaultProps:function getDefaultProps(){return{tabBarPosition:'top',initialPage:0,page:-1,onChangeTab:function onChangeTab(){},onScroll:function onScroll(){},contentProps:{},scrollWithoutAnimation:false,locked:false,prerenderingSiblingsNumber:0};},getInitialState:function getInitialState(){return{currentPage:this.props.initialPage,scrollValue:new Animated.Value(this.props.initialPage),containerWidth:Dimensions.get('window').width,sceneKeys:this.newSceneKeys({currentPage:this.props.initialPage})};},componentDidMount:function componentDidMount(){var _this=this;var scrollFn=function scrollFn(){if(_this.scrollView){_this.state.scrollValue.setValue(_this.props.initialPage);}};_utils.InteractionManager.runAfterInteractions(scrollFn);setTimeout(function(){_this.scrollView.scrollTo({x:_this.props.initialPage*_this.state.containerWidth,animated:false});});},UNSAFE_componentWillReceiveProps:function UNSAFE_componentWillReceiveProps(props){if(props.children!==this.props.children){this.updateSceneKeys({page:this.state.currentPage,children:props.children});}if(props.page>=0&&props.page!==this.state.currentPage){this.goToPage(props.page);}},goToPage:function goToPage(pageNumber){var offset=pageNumber*this.state.containerWidth;if(this.scrollView){this.scrollView.scrollTo({x:offset,y:0,animated:!this.props.scrollWithoutAnimation});}var currentPage=this.state.currentPage;this.updateSceneKeys({page:pageNumber,callback:this._onChangeTab.bind(this,currentPage,pageNumber)});},renderTabBar:function renderTabBar(props){if(this.props.renderTabBar===false){return null;}else if(this.props.renderTabBar){return React.cloneElement(this.props.renderTabBar(props),props);}return React.createElement(DefaultTabBar,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:123}}));},updateSceneKeys:function updateSceneKeys(_ref){var page=_ref.page,_ref$children=_ref.children,children=_ref$children===undefined?this.props.children:_ref$children,_ref$callback=_ref.callback,callback=_ref$callback===undefined?function(){}:_ref$callback;var newKeys=this.newSceneKeys({previousKeys:this.state.sceneKeys,currentPage:page,children:children});this.setState({currentPage:page,sceneKeys:newKeys},callback);},newSceneKeys:function newSceneKeys(_ref2){var _this2=this;var _ref2$previousKeys=_ref2.previousKeys,previousKeys=_ref2$previousKeys===undefined?[]:_ref2$previousKeys,_ref2$currentPage=_ref2.currentPage,currentPage=_ref2$currentPage===undefined?0:_ref2$currentPage,_ref2$children=_ref2.children,children=_ref2$children===undefined?this.props.children:_ref2$children;var newKeys=[];this._children(children).forEach(function(child,idx){var key=_this2._makeSceneKey(child,idx);if(_this2._keyExists(previousKeys,key)||_this2._shouldRenderSceneKey(idx,currentPage)){newKeys.push(key);}});return newKeys;},_shouldRenderSceneKey:function _shouldRenderSceneKey(idx,currentPageKey){var numOfSibling=this.props.prerenderingSiblingsNumber;return idx<currentPageKey+numOfSibling+1&&idx>currentPageKey-numOfSibling-1;},_keyExists:function _keyExists(sceneKeys,key){return sceneKeys.find(function(sceneKey){return key===sceneKey;});},_makeSceneKey:function _makeSceneKey(child,idx){return child.props.heading+'_'+idx;},renderScrollableContent:function renderScrollableContent(){var _this3=this;var scenes=this._composeScenes();return React.createElement(ScrollView,_extends({horizontal:true,pagingEnabled:true,automaticallyAdjustContentInsets:false,keyboardShouldPersistTaps:'handled',contentOffset:{x:this.props.initialPage*this.state.containerWidth},ref:function ref(scrollView){_this3.scrollView=scrollView;},onScroll:function onScroll(e){var offsetX=e.nativeEvent.contentOffset.x;_this3._updateScrollValue(offsetX/_this3.state.containerWidth);},onMomentumScrollBegin:this._onMomentumScrollBeginAndEnd,onMomentumScrollEnd:this._onMomentumScrollBeginAndEnd,scrollEventThrottle:16,scrollsToTop:false,showsHorizontalScrollIndicator:false,scrollEnabled:!this.props.locked,directionalLockEnabled:true,alwaysBounceVertical:false,keyboardDismissMode:'on-drag'},this.props.contentProps,{__source:{fileName:_jsxFileName,lineNumber:176}}),scenes);},_composeScenes:function _composeScenes(){var _this4=this;return this._children().map(function(child,idx){var key=_this4._makeSceneKey(child,idx);return React.createElement(SceneComponent,{key:child.key,shouldUpdated:_this4._shouldRenderSceneKey(idx,_this4.state.currentPage),style:{width:_this4.state.containerWidth},__source:{fileName:_jsxFileName,lineNumber:211}},_this4._keyExists(_this4.state.sceneKeys,key)?child:React.createElement(View,{heading:child.props.heading,__source:{fileName:_jsxFileName,lineNumber:222}}));});},_onMomentumScrollBeginAndEnd:function _onMomentumScrollBeginAndEnd(e){var offsetX=e.nativeEvent.contentOffset.x;var page=Math.round(offsetX/this.state.containerWidth);if(this.state.currentPage!==page){this._updateSelectedPage(page);}},_updateSelectedPage:function _updateSelectedPage(nextPage){var localNextPage=nextPage;if(typeof localNextPage==='object'){localNextPage=nextPage.nativeEvent.position;}var currentPage=this.state.currentPage;this.updateSceneKeys({page:localNextPage,callback:this._onChangeTab.bind(this,currentPage,localNextPage)});},_onChangeTab:function _onChangeTab(prevPage,currentPage){this.props.onChangeTab({i:currentPage,ref:this._children()[currentPage],from:prevPage});},_updateScrollValue:function _updateScrollValue(value){this.state.scrollValue.setValue(value);this.props.onScroll(value);},_handleLayout:function _handleLayout(e){var _this5=this;var width=e.nativeEvent.layout.width;if(!width||width<=0||Math.round(width)===Math.round(this.state.containerWidth)){return;}this.setState({containerWidth:width});this.requestAnimationFrame(function(){_this5.goToPage(_this5.state.currentPage);});},_children:function _children(){var children=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.props.children;return React.Children.map(children,function(child){return child;});},render:function render(){var overlayTabs=this.props.tabBarPosition==='overlayTop'||this.props.tabBarPosition==='overlayBottom';var tabBarProps={goToPage:this.goToPage,tabs:this._children().map(function(child){return child.props.heading;}),tabStyle:this._children().map(function(child){return child.props.tabStyle;}),activeTabStyle:this._children().map(function(child){return child.props.activeTabStyle;}),textStyle:this._children().map(function(child){return child.props.textStyle;}),activeTextStyle:this._children().map(function(child){return child.props.activeTextStyle;}),tabHeaderStyle:this._children().map(function(child){return _lodash2.default.get(child.props.heading.props,'style',undefined);}),disabled:this._children().map(function(child){return child.props.disabled;}),activeTab:this.state.currentPage,scrollValue:this.state.scrollValue,containerWidth:this.state.containerWidth};if(this.props.tabBarBackgroundColor){tabBarProps.backgroundColor=this.props.tabBarBackgroundColor;}if(this.props.tabBarActiveTextColor){tabBarProps.activeTextColor=this.props.tabBarActiveTextColor;}if(this.props.tabBarInactiveTextColor){tabBarProps.inactiveTextColor=this.props.tabBarInactiveTextColor;}if(this.props.tabBarTextStyle){tabBarProps.textStyle=this.props.tabBarTextStyle;}if(this.props.tabBarUnderlineStyle){tabBarProps.underlineStyle=this.props.tabBarUnderlineStyle;}if(this.props.tabContainerStyle){tabBarProps.tabContainerStyle=this.props.tabContainerStyle;}if(overlayTabs){var _tabBarProps$style;tabBarProps.style=(_tabBarProps$style={position:'absolute',left:0,right:0},_defineProperty(_tabBarProps$style,this.props.tabBarPosition==='overlayTop'?'top':'bottom',0),_defineProperty(_tabBarProps$style,'backgroundColor','rgba(255, 255, 255, 0.7)'),_tabBarProps$style);}return React.createElement(View,{style:[styles.container,this.props.style],onLayout:this._handleLayout,__source:{fileName:_jsxFileName,lineNumber:334}},(this.props.tabBarPosition==='top'||this.props.tabBarPosition==='overlayTop')&&this.renderTabBar(tabBarProps),this.renderScrollableContent(),(this.props.tabBarPosition==='bottom'||this.props.tabBarPosition==='overlayBottom')&&this.renderTabBar(tabBarProps));}});exports.default=ScrollableTabView;var styles=StyleSheet.create({container:{flex:1},scrollableContentAndroid:{flex:1}});
+// Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _jsxFileName='src/basic/Tabs/index.js';var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);var _createReactClass=require('create-react-class');var _createReactClass2=_interopRequireDefault(_createReactClass);var _lodash=require('lodash');var _lodash2=_interopRequireDefault(_lodash);var _utils=require('../../utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var React=require('react');var Component=React.Component;var ReactNative=require('react-native');var Dimensions=ReactNative.Dimensions,View=ReactNative.View,Animated=ReactNative.Animated,ScrollView=ReactNative.ScrollView,StyleSheet=ReactNative.StyleSheet,Platform=ReactNative.Platform;var TimerMixin=require('react-timer-mixin');var SceneComponent=require('./SceneComponent');var _require=require('./DefaultTabBar'),DefaultTabBar=_require.DefaultTabBar;var _require2=require('./ScrollableTabBar'),ScrollableTabBar=_require2.ScrollableTabBar;var ScrollableTabView=(0,_createReactClass2.default)({displayName:'ScrollableTabView',mixins:[TimerMixin],statics:{DefaultTabBar:DefaultTabBar,ScrollableTabBar:ScrollableTabBar},propTypes:{tabBarPosition:_propTypes2.default.oneOf(['top','bottom','overlayTop','overlayBottom']),initialPage:_propTypes2.default.number,page:_propTypes2.default.number,onChangeTab:_propTypes2.default.func,onScroll:_propTypes2.default.func,renderTabBar:_propTypes2.default.any,style:_utils.ViewPropTypes.style,contentProps:_propTypes2.default.object,scrollWithoutAnimation:_propTypes2.default.bool,locked:_propTypes2.default.bool,prerenderingSiblingsNumber:_propTypes2.default.number},getDefaultProps:function getDefaultProps(){return{tabBarPosition:'top',initialPage:0,page:-1,onChangeTab:function onChangeTab(){},onScroll:function onScroll(){},contentProps:{},scrollWithoutAnimation:false,locked:false,prerenderingSiblingsNumber:0};},getInitialState:function getInitialState(){return{currentPage:this.props.initialPage,scrollValue:new Animated.Value(this.props.initialPage),containerWidth:Dimensions.get('window').width,sceneKeys:this.newSceneKeys({currentPage:this.props.initialPage})};},componentDidMount:function componentDidMount(){var _this=this;var scrollFn=function scrollFn(){if(_this.scrollView){_this.state.scrollValue.setValue(_this.props.initialPage);}};_utils.InteractionManager.runAfterInteractions(scrollFn);setTimeout(function(){_this.scrollView.scrollTo({x:_this.props.initialPage*_this.state.containerWidth,animated:false});});},UNSAFE_componentWillReceiveProps:function UNSAFE_componentWillReceiveProps(props){if(props.children!==this.props.children){this.updateSceneKeys({page:this.state.currentPage,children:props.children});}if(props.page>=0&&props.page!==this.state.currentPage){this.goToPage(props.page);}},goToPage:function goToPage(pageNumber){var offset=pageNumber*this.state.containerWidth;if(this.scrollView){this.scrollView.scrollTo({x:offset,y:0,animated:!this.props.scrollWithoutAnimation});}var currentPage=this.state.currentPage;this.updateSceneKeys({page:pageNumber,callback:this._onChangeTab.bind(this,currentPage,pageNumber)});},renderTabBar:function renderTabBar(props){if(this.props.renderTabBar===false){return null;}else if(this.props.renderTabBar){return React.cloneElement(this.props.renderTabBar(props),props);}return React.createElement(DefaultTabBar,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:123}}));},updateSceneKeys:function updateSceneKeys(_ref){var page=_ref.page,_ref$children=_ref.children,children=_ref$children===undefined?this.props.children:_ref$children,_ref$callback=_ref.callback,callback=_ref$callback===undefined?function(){}:_ref$callback;var newKeys=this.newSceneKeys({previousKeys:this.state.sceneKeys,currentPage:page,children:children});this.setState({currentPage:page,sceneKeys:newKeys},callback);},newSceneKeys:function newSceneKeys(_ref2){var _this2=this;var _ref2$previousKeys=_ref2.previousKeys,previousKeys=_ref2$previousKeys===undefined?[]:_ref2$previousKeys,_ref2$currentPage=_ref2.currentPage,currentPage=_ref2$currentPage===undefined?0:_ref2$currentPage,_ref2$children=_ref2.children,children=_ref2$children===undefined?this.props.children:_ref2$children;var newKeys=[];this._children(children).forEach(function(child,idx){var key=_this2._makeSceneKey(child,idx);if(_this2._keyExists(previousKeys,key)||_this2._shouldRenderSceneKey(idx,currentPage)){newKeys.push(key);}});return newKeys;},_shouldRenderSceneKey:function _shouldRenderSceneKey(idx,currentPageKey){var numOfSibling=this.props.prerenderingSiblingsNumber;return idx<currentPageKey+numOfSibling+1&&idx>currentPageKey-numOfSibling-1;},_keyExists:function _keyExists(sceneKeys,key){return sceneKeys.find(function(sceneKey){return key===sceneKey;});},_makeSceneKey:function _makeSceneKey(child,idx){return child.props.heading+'_'+idx;},renderScrollableContent:function renderScrollableContent(){var _this3=this;var scenes=this._composeScenes();return React.createElement(ScrollView,_extends({horizontal:true,pagingEnabled:true,automaticallyAdjustContentInsets:false,keyboardShouldPersistTaps:'handled',contentOffset:{x:this.props.initialPage*this.state.containerWidth},ref:function ref(scrollView){_this3.scrollView=scrollView;},onScroll:function onScroll(e){var offsetX=e.nativeEvent.contentOffset.x;_this3._updateScrollValue(offsetX/_this3.state.containerWidth);},onMomentumScrollBegin:this._onMomentumScrollBeginAndEnd,onMomentumScrollEnd:this._onMomentumScrollBeginAndEnd,scrollEventThrottle:16,scrollsToTop:false,showsHorizontalScrollIndicator:false,scrollEnabled:!this.props.locked,directionalLockEnabled:true,alwaysBounceVertical:false,keyboardDismissMode:'on-drag'},this.props.contentProps,{__source:{fileName:_jsxFileName,lineNumber:176}}),scenes);},_composeScenes:function _composeScenes(){var _this4=this;return this._children().map(function(child,idx){var key=_this4._makeSceneKey(child,idx);return React.createElement(SceneComponent,{key:child.key,shouldUpdated:_this4._shouldRenderSceneKey(idx,_this4.state.currentPage),style:{width:_this4.state.containerWidth},__source:{fileName:_jsxFileName,lineNumber:211}},_this4._keyExists(_this4.state.sceneKeys,key)?child:React.createElement(View,{heading:child.props.heading,__source:{fileName:_jsxFileName,lineNumber:222}}));});},_onMomentumScrollBeginAndEnd:function _onMomentumScrollBeginAndEnd(e){var offsetX=e.nativeEvent.contentOffset.x;var page=Math.round(offsetX/this.state.containerWidth);if(this.state.currentPage!==page){this._updateSelectedPage(page);}},_updateSelectedPage:function _updateSelectedPage(nextPage){var localNextPage=nextPage;if(typeof localNextPage==='object'){localNextPage=nextPage.nativeEvent.position;}var currentPage=this.state.currentPage;this.updateSceneKeys({page:localNextPage,callback:this._onChangeTab.bind(this,currentPage,localNextPage)});},_onChangeTab:function _onChangeTab(prevPage,currentPage){this.props.onChangeTab({i:currentPage,ref:this._children()[currentPage],from:prevPage});},_updateScrollValue:function _updateScrollValue(value){this.state.scrollValue.setValue(value);this.props.onScroll(value);},_handleLayout:function _handleLayout(e){var _this5=this;var width=e.nativeEvent.layout.width;if(!width||width<=0||Math.round(width)===Math.round(this.state.containerWidth)){return;}this.setState({containerWidth:width});this.requestAnimationFrame(function(){_this5.goToPage(_this5.state.currentPage);});},_children:function _children(){var children=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.props.children;return React.Children.map(children,function(child){return child;});},render:function render(){var overlayTabs=this.props.tabBarPosition==='overlayTop'||this.props.tabBarPosition==='overlayBottom';var tabBarProps={goToPage:this.goToPage,tabs:this._children().map(function(child){return child.props.heading;}),tabStyle:this._children().map(function(child){return child.props.tabStyle;}),activeTabStyle:this._children().map(function(child){return child.props.activeTabStyle;}),textStyle:this._children().map(function(child){return child.props.textStyle;}),activeTextStyle:this._children().map(function(child){return child.props.activeTextStyle;}),tabHeaderStyle:this._children().map(function(child){return _lodash2.default.get(child.props.heading.props,'style',undefined);}),disabled:this._children().map(function(child){return child.props.disabled;}),activeTab:this.state.currentPage,scrollValue:this.state.scrollValue,containerWidth:this.state.containerWidth};if(this.props.tabBarBackgroundColor){tabBarProps.backgroundColor=this.props.tabBarBackgroundColor;}if(this.props.tabBarActiveTextColor){tabBarProps.activeTextColor=this.props.tabBarActiveTextColor;}if(this.props.tabBarInactiveTextColor){tabBarProps.inactiveTextColor=this.props.tabBarInactiveTextColor;}if(this.props.tabBarTextStyle){tabBarProps.textStyle=this.props.tabBarTextStyle;}if(this.props.tabBarUnderlineStyle){tabBarProps.underlineStyle=this.props.tabBarUnderlineStyle;}if(this.props.tabContainerStyle){tabBarProps.tabContainerStyle=this.props.tabContainerStyle;}if(overlayTabs){var _tabBarProps$style;tabBarProps.style=(_tabBarProps$style={position:'absolute',left:0,right:0},_defineProperty(_tabBarProps$style,this.props.tabBarPosition==='overlayTop'?'top':'bottom',0),_defineProperty(_tabBarProps$style,'backgroundColor','rgba(255, 255, 255, 0.7)'),_tabBarProps$style);}return React.createElement(View,{style:[styles.container,this.props.style],onLayout:this._handleLayout,__source:{fileName:_jsxFileName,lineNumber:334}},(this.props.tabBarPosition==='top'||this.props.tabBarPosition==='overlayTop')&&this.renderTabBar(tabBarProps),this.renderScrollableContent(),(this.props.tabBarPosition==='bottom'||this.props.tabBarPosition==='overlayBottom')&&this.renderTabBar(tabBarProps));}});exports.default=ScrollableTabView;var styles=StyleSheet.create({container:{flex:1},scrollableContentAndroid:{flex:1}});
 //# sourceMappingURL=index.js.map
+
+// 21.02.23 추가, 슬기
+
+import PropTypes from 'prop-types';
+import createReactClass from 'create-react-class';
+import _ from 'lodash';
+import { InteractionManager } from '../../utils';
+const React = require('react');
+const { Component } = React;
+const ReactNative = require('react-native');
+const {
+  Dimensions,
+  View,
+  Animated,
+  ScrollView,
+  StyleSheet,
+  Platform
+} = ReactNative;
+
+const SceneComponent = require('./SceneComponent');
+const { DefaultTabBar } = require('./DefaultTabBar');
+const { ScrollableTabBar } = require('./ScrollableTabBar');
+
+const ScrollableTabView = createReactClass({
+  statics: {
+    DefaultTabBar,
+    ScrollableTabBar
+  },
+
+  propTypes: {
+    tabBarPosition: PropTypes.oneOf([
+      'top',
+      'bottom',
+      'overlayTop',
+      'overlayBottom'
+    ]),
+    initialPage: PropTypes.number,
+    page: PropTypes.number,
+    onChangeTab: PropTypes.func,
+    onScroll: PropTypes.func,
+    renderTabBar: PropTypes.any,
+    style: PropTypes.shape({
+      style: PropTypes.any,
+    }),
+    contentProps: PropTypes.object,
+    scrollWithoutAnimation: PropTypes.bool,
+    locked: PropTypes.bool,
+    prerenderingSiblingsNumber: PropTypes.number
+  },
+
+  getDefaultProps() {
+    return {
+      tabBarPosition: 'top',
+      initialPage: 0,
+      page: -1,
+      onChangeTab: () => {},
+      onScroll: () => {},
+      contentProps: {},
+      scrollWithoutAnimation: false,
+      locked: false,
+      prerenderingSiblingsNumber: 0
+    };
+  },
+
+  getInitialState() {
+    return {
+      currentPage: this.props.initialPage,
+      scrollValue: new Animated.Value(this.props.initialPage),
+      containerWidth: Dimensions.get('window').width,
+      sceneKeys: this.newSceneKeys({ currentPage: this.props.initialPage })
+    };
+  },
+
+  componentDidMount() {
+    const scrollFn = () => {
+      if (this.scrollView) {
+        this.state.scrollValue.setValue(this.props.initialPage);
+      }
+    };
+    InteractionManager.runAfterInteractions(scrollFn);
+    // because of contentOffset is not working on Android
+    this.scrollToTimer = setTimeout(() => {
+      if (this.scrollView) {
+        this.scrollView.scrollTo({
+          x: this.props.initialPage * this.state.containerWidth,
+          animated: false
+        });
+      }
+    });
+  },
+
+  componentWillUnmount() {
+    if (this.scrollToTimer) {
+      clearTimeout(this.scrollToTimer);
+    }
+  },
+
+  UNSAFE_componentWillReceiveProps(props) {
+    if (props.children !== this.props.children) {
+      this.updateSceneKeys({
+        page: this.state.currentPage,
+        children: props.children
+      });
+    }
+
+    if (props.page >= 0 && props.page !== this.state.currentPage) {
+      this.goToPage(props.page);
+    }
+  },
+
+  goToPage(pageNumber) {
+    const offset = pageNumber * this.state.containerWidth;
+    if (this.scrollView) {
+      this.scrollView.scrollTo({
+        x: offset,
+        y: 0,
+        animated: !this.props.scrollWithoutAnimation
+      });
+    }
+
+    const currentPage = this.state.currentPage;
+    this.updateSceneKeys({
+      page: pageNumber,
+      callback: this._onChangeTab.bind(this, currentPage, pageNumber)
+    });
+  },
+
+  renderTabBar(props) {
+    if (this.props.renderTabBar === false) {
+      return null;
+    } else if (this.props.renderTabBar) {
+      return React.cloneElement(this.props.renderTabBar(props), props);
+    }
+    return <DefaultTabBar {...props} />;
+  },
+
+  updateSceneKeys({
+                    page,
+                    children = this.props.children,
+                    callback = () => {}
+                  }) {
+    const newKeys = this.newSceneKeys({
+      previousKeys: this.state.sceneKeys,
+      currentPage: page,
+      children
+    });
+    this.setState({ currentPage: page, sceneKeys: newKeys }, callback);
+  },
+
+  newSceneKeys({
+                 previousKeys = [],
+                 currentPage = 0,
+                 children = this.props.children
+               }) {
+    const newKeys = [];
+    this._children(children).forEach((child, idx) => {
+      const key = this._makeSceneKey(child, idx);
+      if (
+        this._keyExists(previousKeys, key) ||
+        this._shouldRenderSceneKey(idx, currentPage)
+      ) {
+        newKeys.push(key);
+      }
+    });
+    return newKeys;
+  },
+
+  _shouldRenderSceneKey(idx, currentPageKey) {
+    const numOfSibling = this.props.prerenderingSiblingsNumber;
+    return (
+      idx < currentPageKey + numOfSibling + 1 &&
+      idx > currentPageKey - numOfSibling - 1
+    );
+  },
+
+  _keyExists(sceneKeys, key) {
+    return sceneKeys.find(sceneKey => key === sceneKey);
+  },
+
+  _makeSceneKey(child, idx) {
+    return `${child.props.heading}_${idx}`;
+  },
+
+  renderScrollableContent() {
+    const scenes = this._composeScenes();
+    return (
+      <ScrollView
+        horizontal
+        pagingEnabled
+        automaticallyAdjustContentInsets={false}
+        keyboardShouldPersistTaps="handled"
+        contentOffset={{
+          x: this.props.initialPage * this.state.containerWidth
+        }}
+        ref={scrollView => {
+          this.scrollView = scrollView;
+        }}
+        onScroll={e => {
+          const offsetX = e.nativeEvent.contentOffset.x;
+          this._updateScrollValue(offsetX / this.state.containerWidth);
+        }}
+        onMomentumScrollBegin={this._onMomentumScrollBeginAndEnd}
+        onMomentumScrollEnd={this._onMomentumScrollBeginAndEnd}
+        scrollEventThrottle={16}
+        scrollsToTop={false}
+        showsHorizontalScrollIndicator={false}
+        scrollEnabled={!this.props.locked}
+        directionalLockEnabled
+        alwaysBounceVertical={false}
+        keyboardDismissMode="on-drag"
+        {...this.props.contentProps}
+      >
+        {scenes}
+      </ScrollView>
+    );
+  },
+
+  _composeScenes() {
+    return this._children().map((child, idx) => {
+      const key = this._makeSceneKey(child, idx);
+      return (
+        <SceneComponent
+          key={child.key}
+          shouldUpdated={this._shouldRenderSceneKey(
+            idx,
+            this.state.currentPage
+          )}
+          style={{ width: this.state.containerWidth }}
+        >
+          {this._keyExists(this.state.sceneKeys, key) ? (
+            child
+          ) : (
+            <View heading={child.props.heading} />
+          )}
+        </SceneComponent>
+      );
+    });
+  },
+
+  _onMomentumScrollBeginAndEnd(e) {
+    const offsetX = e.nativeEvent.contentOffset.x;
+    const page = Math.round(offsetX / this.state.containerWidth);
+    if (this.state.currentPage !== page) {
+      this._updateSelectedPage(page);
+    }
+  },
+
+  _updateSelectedPage(nextPage) {
+    let localNextPage = nextPage;
+    if (typeof localNextPage === 'object') {
+      localNextPage = nextPage.nativeEvent.position;
+    }
+
+    const currentPage = this.state.currentPage;
+    this.updateSceneKeys({
+      page: localNextPage,
+      callback: this._onChangeTab.bind(this, currentPage, localNextPage)
+    });
+  },
+
+  _onChangeTab(prevPage, currentPage) {
+    this.props.onChangeTab({
+      i: currentPage,
+      ref: this._children()[currentPage],
+      from: prevPage
+    });
+  },
+
+  _updateScrollValue(value) {
+    this.state.scrollValue.setValue(value);
+    this.props.onScroll(value);
+  },
+
+  _handleLayout(e) {
+    const { width } = e.nativeEvent.layout;
+
+    if (
+      !width ||
+      width <= 0 ||
+      Math.round(width) === Math.round(this.state.containerWidth)
+    ) {
+      return;
+    }
+    this.setState({ containerWidth: width });
+    this.requestAnimationFrame && this.requestAnimationFrame(() => {
+      this.goToPage(this.state.currentPage);
+    });
+  },
+
+  _children(children = this.props.children) {
+    return React.Children.map(children, child => child);
+  },
+
+  render() {
+    const overlayTabs =
+      this.props.tabBarPosition === 'overlayTop' ||
+      this.props.tabBarPosition === 'overlayBottom';
+    const tabBarProps = {
+      goToPage: this.goToPage,
+      tabs: this._children().map(child => child.props.heading),
+      tabStyle: this._children().map(child => child.props.tabStyle),
+      activeTabStyle: this._children().map(child => child.props.activeTabStyle),
+      textStyle: this._children().map(child => child.props.textStyle),
+      activeTextStyle: this._children().map(
+        child => child.props.activeTextStyle
+      ),
+      tabHeaderStyle: this._children().map(child =>
+        _.get(child.props.heading.props, 'style', undefined)
+      ),
+      disabled: this._children().map(child => child.props.disabled),
+      accessible: this._children().map(child => child.props.accessible==false ? false : true || true ),
+      accessibilityLabel: this._children().map(child => child.props.accessibilityLabel),
+      activeTab: this.state.currentPage,
+      scrollValue: this.state.scrollValue,
+      containerWidth: this.state.containerWidth
+    };
+
+    if (this.props.tabBarBackgroundColor) {
+      tabBarProps.backgroundColor = this.props.tabBarBackgroundColor;
+    }
+    if (this.props.tabBarActiveTextColor) {
+      tabBarProps.activeTextColor = this.props.tabBarActiveTextColor;
+    }
+    if (this.props.tabBarInactiveTextColor) {
+      tabBarProps.inactiveTextColor = this.props.tabBarInactiveTextColor;
+    }
+    if (this.props.tabBarTextStyle) {
+      tabBarProps.textStyle = this.props.tabBarTextStyle;
+    }
+    if (this.props.tabBarUnderlineStyle) {
+      tabBarProps.underlineStyle = this.props.tabBarUnderlineStyle;
+    }
+    if (this.props.tabContainerStyle) {
+      tabBarProps.tabContainerStyle = this.props.tabContainerStyle;
+    }
+    if (overlayTabs) {
+      tabBarProps.style = {
+        position: 'absolute',
+        left: 0,
+        right: 0,
+        [this.props.tabBarPosition === 'overlayTop' ? 'top' : 'bottom']: 0,
+        backgroundColor: 'rgba(255, 255, 255, 0.7)'
+      };
+    }
+
+    return (
+      <View
+        style={[styles.container, this.props.style]}
+        onLayout={this._handleLayout}
+      >
+        {(this.props.tabBarPosition === 'top' ||
+          this.props.tabBarPosition === 'overlayTop') &&
+        this.renderTabBar(tabBarProps)}
+        {this.renderScrollableContent()}
+        {(this.props.tabBarPosition === 'bottom' ||
+          this.props.tabBarPosition === 'overlayBottom') &&
+        this.renderTabBar(tabBarProps)}
+      </View>
+    );
+  }
+});
+
+export default ScrollableTabView;
+
+const styles = StyleSheet.create({
+  container: {
+    flex: 1
+  },
+  scrollableContentAndroid: {
+    flex: 1
+  }
+});
\ No newline at end of file
diff --git a/node_modules/native-base/index.d.ts b/node_modules/native-base/index.d.ts
index 7cf347d..41e77ca 100644
--- a/node_modules/native-base/index.d.ts
+++ b/node_modules/native-base/index.d.ts
@@ -670,6 +670,7 @@ declare module "native-base" {
              * Default: 30
              */
 			size?: number;
+			source: any;
 			/**
              * Represents shape of thumbnail.
              * By default thumbnail is circle in shape.
@@ -682,6 +683,7 @@ declare module "native-base" {
 			square?: boolean;
 			small?: boolean;
 			large?: boolean;
+			// source?: string;
 		}
 		/**
          * see Widget Spinner.js
